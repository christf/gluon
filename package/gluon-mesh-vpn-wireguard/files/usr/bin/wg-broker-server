#!/bin/bash
# SPDX-License-Identifier: GPL-2.0
#
# Copyright (C) Christof Schulze <christof@christofschulze.com>. All Rights Reserved.
#

STARTPORT=40000
ENDPORT=41000
MTU=1374
WG="wg"
WAN="br-wan"

[[ -f /etc/wg-broker/config ]] && . /etc/wg-broker/config

[[ -f /etc/wg-broker/secret ]] || {
echo expecting to find wg secret key in /etc/wg-broker/secret >&2
exit 1
}

PRIVATEKEY=/etc/wg-broker/secret

set -x
get_wg_interfaces() {
    $WG show interfaces |grep babel-wg
}

get_connection_count() {
    interfaces=( $(get_wg_interfaces) )
    echo ${#interface[@]}
}

get_port() {
    $WG show ${1:-all} listen-port
}

port_is_assigned() {
    get_port | grep -q "$1"
}

find_free_port() {
    local port=$((STARTPORT + $RANDOM%1000)) # adding RANDOM to  not assign ports sequentially and savesome time in belows loop

    while $(port_is_assigned $port)
    do
	port=$(( (port+1) % ENDPORT ))
    done

    echo $port
}

add_interface() {
    local newdevice="$1"
    local freeport="$2"
    local public_key="$3"
    local rport="$4"
    local remoteip="$5"

    ip link add dev $newdevice type wireguard
    ip link set multicast on mtu $MTU dev $newdevice
    ip a a fe80::1/64 dev $newdevice

    $WG set $newdevice private-key $PRIVATEKEY listen-port $freeport peer $public_key endpoint $remoteip:$rport allowed-ips ::/0
    # ip6tables -A INPUT -i $newdevice -p udp --dport 6696 -j ACCEPT
    # ip6tables -A INPUT -i $WAN -p udp --dport $freeport -j ACCEPT
    # iptables -A INPUT -i $WAN -p udp --dport $freeport -j ACCEPT
    ip link set up dev $newdevice
    echo interface $newdevice | timeout 0.2 nc ::1 33123 >/dev/null
}

del_interface() {
  ip link show "$1" >/dev/null 2>&1 && 
  {
    ip link del "$1"
    echo flush interface $1 | timeout 0.2 nc ::1 33123
  } >&2
}

nic_namegen() {
    local number=1

    while $(get_wg_interfaces|grep -q babel-wg-$number)
    do
	((number+=1))
    done
    echo "babel-wg-$number"
}

prune_ifs() {
    local interface="$1"

    # delete interface if its peers last_handshake is > 10 Minutes ago
    #	if $($WG show $interface| sed ':a;/^  /{N;s/\n//;ba}'|sed 's/peer:/\npeer/g'|grep peer|grep -qE "[1-5][0-9] minutes")
    #	then
    lhandshake=$($WG show $interface latest-handshakes|awk '{print $2}')

    if [[ $lhandshake -gt 0 ]] && [[ $(( $(date +%s) - lhandshake))  -gt 600 ]]
    then
	del_interface $interface
    fi

    if [[ $( $WG show $interface peers | wc -l ) -eq 0 ]]
    then
	del_interface $interface
    fi
}

find_if() {
    local peer="$1"

    for i in $(get_wg_interfaces)
    do
	if wg show $i peers |grep -q $peer
	then
	    echo $i
	    return
	fi
    done
}

handle_connection() {
    read -r REPLY
    # echo read from client: $REPLY >&2
    jq -r ".localport" <<< "$REPLY" >/dev/null 2>&1 || return 1
    local pkey=$(jq -r ".pubkey" <<<"$REPLY")

    local rport=$(jq -r ".localport" <<< "$REPLY")

    if [[ -n $pkey ]] && [[ -n $rport ]]
    then
	[[ "$rport" =~ [0-9]+ ]] || 
	{
	    echo invalid port >&2
	    return
	}

	if [[ ! $(base64 -d <<<"$pkey" 2>/dev/null |wc -c) -eq 32 ]]
	then
	    echo "invalid public key" >&2
	    return
	fi

	ifname=$(find_if $pkey)

	if [[ -z $ifname ]]
	then
	    port=$(find_free_port)
	    ifname=$(nic_namegen)
	else
	    port=$(wg show $ifname listen-port)
	fi

	success=0
	if [[ $(get_connection_count) -lt $maxconnections ]]
	then
	    response="{\"version\":1, \"error\": { \"code\":1, \"reason\": \"Server is not accepting additional connections\"} }"
	else
	    response="{\"version\":1, \"port\": $port}"
	    success=1
	fi

	echo "working on $ifname, write to client: $response"  >&2
	del_interface $ifname
	[[ $success == "1" ]] && add_interface $ifname $port $pkey $rport 0.0.0.0
	echo "$response"
    fi
}

# TODO prettify this
iptables -L -v|grep dpt:40000|grep tcp|grep $WAN |grep -q ACCEPT || iptables -A INPUT -p tcp --dport 40000 -j ACCEPT
iptables -L -v|grep udp |grep $WAN|grep 40000:41000 -q || iptables -A INPUT -i $WAN -p udp -m multiport --dports 40000:41000 -j ACCEPT
ip6tables -L -v|grep udp |grep $WAN|grep 40000:41000 -q || ip6tables -A INPUT -i $WAN -p udp -m multiport --dports 40000:41000 -j ACCEPT

# ALLOW inbound connections on WAN for UDP ports 40K-41K

rm -f /tmp/wg-broker
mkfifo /tmp/wg-broker
rm -f /var/lock/${0##*/}

{
    while true
    do
	(
	flock -n 42
	for i in $(get_wg_interfaces)
	do
	    prune_ifs $i
	done
	) 42>/var/lock/${0##*/}
	sleep 300
    done
} &

while true
do
    cat /tmp/wg-broker | handle_connection | nc -w 1 -l 40000 > /tmp/wg-broker
done

